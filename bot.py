import asyncio
import logging
import os
import uuid
import cv2
import torch

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import FSInputFile

from ultralytics import YOLO

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
TEMP_DIR = "temp_videos"

os.makedirs(TEMP_DIR, exist_ok=True)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLO ---
try:
    logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLO...")
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    model = YOLO('yolo11n.pt').to(device)
    logging.info(f"–ú–æ–¥–µ–ª—å YOLO –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç {device}.")
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ YOLO: {e}")
    exit()

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    await message.reply("–ü—Ä–∏–≤–µ—Ç! üëã\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ (–∫–∞–∫ —Ñ–∞–π–ª –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ), –∏ —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –æ–±—ä–µ–∫—Ç—ã —Å –ø–æ–º–æ—â—å—é YOLO.")

@dp.message(F.document | F.video)
async def handle_all_videos(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –≤–∏–¥–µ–æ (–¥–æ–∫—É–º–µ–Ω—Ç –∏ –æ–±—ã—á–Ω–æ–µ –≤–∏–¥–µ–æ)"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    message_id = message.message_id

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    if message.video:
        file = message.video
        is_document = False
    else:
        file = message.document
        is_document = True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME-—Ç–∏–ø–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if is_document and not (file.mime_type and file.mime_type.startswith('video/')):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.")
        return

    request_id = str(uuid.uuid4())
    input_video_path = os.path.join(TEMP_DIR, f"{request_id}_input.mp4")
    output_video_path = os.path.join(TEMP_DIR, f"{request_id}_output.mp4")

    try:
        await message.reply("–ü—Ä–∏–Ω—è–ª –≤–∏–¥–µ–æ. –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        file_info = await bot.get_file(file.file_id)
        await bot.download_file(file_info.file_path, input_video_path)
        logging.info(f"–í–∏–¥–µ–æ {file.file_name} ({file.file_size} –±–∞–π—Ç) –æ—Ç {user_id} —Å–∫–∞—á–∞–Ω–æ –≤ {input_video_path}")
        await message.reply("–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å YOLO... ‚è≥")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –æ—Ç {user_id}: {e}")
        await message.reply("–ù–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    try:
        cap = cv2.VideoCapture(input_video_path)
        if not cap.isOpened():
            raise IOError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª.")

        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        fps = cap.get(cv2.CAP_PROP_FPS)
        total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        logging.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ: {width}x{height}, {fps:.2f} FPS, {total_frames} –∫–∞–¥—Ä–æ–≤")

        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(output_video_path, fourcc, fps, (width, height))

        frame_count = 0
        while True:
            ret, frame = cap.read()
            if not ret:
                break

            frame_count += 1
            if frame_count % int(fps) == 0:
                logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ {frame_count}/{total_frames}")

            results = model(frame, device=device, verbose=False)
            annotated_frame = results[0].plot()
            out.write(annotated_frame)

        cap.release()
        out.release()
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ {request_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ {request_id}: {e}")
        await message.reply("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ. üò¢")
        if os.path.exists(input_video_path): os.remove(input_video_path)
        if os.path.exists(output_video_path): os.remove(output_video_path)
        return

    try:
        await message.reply("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
        output_file = FSInputFile(output_video_path, filename=f"processed_{file.file_name or 'video.mp4'}")
        await bot.send_video(chat_id=chat_id, video=output_file, caption="–ì–æ—Ç–æ–≤–æ! ‚úÖ", reply_to_message_id=message_id)
        logging.info(f"–í–∏–¥–µ–æ {request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ {request_id}: {e}")
        try:
            await message.reply("–ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç...")
            output_file_doc = FSInputFile(output_video_path, filename=f"processed_{file.file_name or 'video.mp4'}")
            await bot.send_document(chat_id=chat_id, document=output_file_doc, caption="–ì–æ—Ç–æ–≤–æ! ‚úÖ", reply_to_message_id=message_id)
        except Exception as e2:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {request_id}: {e2}")
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ.")
    finally:
        try:
            if os.path.exists(input_video_path): os.remove(input_video_path)
            if os.path.exists(output_video_path): os.remove(output_video_path)
            logging.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã {request_id} —É–¥–∞–ª–µ–Ω—ã.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ {request_id}: {e}")

@dp.message()
async def handle_other_messages(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    await message.reply("–Ø –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")